---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: metricsets.flux-framework.org
spec:
  group: flux-framework.org
  names:
    kind: MetricSet
    listKind: MetricSetList
    plural: metricsets
    singular: metricset
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: MetricSet is the Schema for the metrics API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MetricSpec defines the desired state of Metric
            properties:
              metrics:
                description: The name of the metric (that will be associated with
                  a flavor like storage)
                items:
                  description: A benchmark is details for one metric The difference
                    between benchmark and metric is subtle. A metric is more a measurment,
                    and the benchmark is the comparison value. I don't have strong
                    opinions but I like exposing "metric/metrics" to the user
                  properties:
                    name:
                      type: string
                  required:
                  - name
                  type: object
                type: array
            required:
            - metrics
            type: object
          status:
            description: MetricStatus defines the observed state of Metric
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
